/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.0
 * source: user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf'
export namespace user {
	export class LoginRequest extends pb_1.Message {
		#one_of_decls: number[][] = []
		constructor(
			data?:
				| any[]
				| {
						email?: string
						password?: string
				  }
		) {
			super()
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('email' in data && data.email != undefined) {
					this.email = data.email
				}
				if ('password' in data && data.password != undefined) {
					this.password = data.password
				}
			}
		}
		get email() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string
		}
		set email(value: string) {
			pb_1.Message.setField(this, 1, value)
		}
		get password() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string
		}
		set password(value: string) {
			pb_1.Message.setField(this, 2, value)
		}
		static fromObject(data: { email?: string; password?: string }): LoginRequest {
			const message = new LoginRequest({})
			if (data.email != null) {
				message.email = data.email
			}
			if (data.password != null) {
				message.password = data.password
			}
			return message
		}
		toObject() {
			const data: {
				email?: string
				password?: string
			} = {}
			if (this.email != null) {
				data.email = this.email
			}
			if (this.password != null) {
				data.password = this.password
			}
			return data
		}
		serialize(): Uint8Array
		serialize(w: pb_1.BinaryWriter): void
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter()
			if (this.email.length) writer.writeString(1, this.email)
			if (this.password.length) writer.writeString(2, this.password)
			if (!w) return writer.getResultBuffer()
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new LoginRequest()
			while (reader.nextField()) {
				if (reader.isEndGroup()) break
				switch (reader.getFieldNumber()) {
					case 1:
						message.email = reader.readString()
						break
					case 2:
						message.password = reader.readString()
						break
					default:
						reader.skipField()
				}
			}
			return message
		}
		serializeBinary(): Uint8Array {
			return this.serialize()
		}
		static deserializeBinary(bytes: Uint8Array): LoginRequest {
			return LoginRequest.deserialize(bytes)
		}
	}
	export class RegisterRequest extends pb_1.Message {
		#one_of_decls: number[][] = []
		constructor(
			data?:
				| any[]
				| {
						username?: string
						password?: string
						email?: string
						code?: string
				  }
		) {
			super()
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('username' in data && data.username != undefined) {
					this.username = data.username
				}
				if ('password' in data && data.password != undefined) {
					this.password = data.password
				}
				if ('email' in data && data.email != undefined) {
					this.email = data.email
				}
				if ('code' in data && data.code != undefined) {
					this.code = data.code
				}
			}
		}
		get username() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string
		}
		set username(value: string) {
			pb_1.Message.setField(this, 1, value)
		}
		get password() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string
		}
		set password(value: string) {
			pb_1.Message.setField(this, 2, value)
		}
		get email() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string
		}
		set email(value: string) {
			pb_1.Message.setField(this, 3, value)
		}
		get code() {
			return pb_1.Message.getFieldWithDefault(this, 5, '') as string
		}
		set code(value: string) {
			pb_1.Message.setField(this, 5, value)
		}
		static fromObject(data: { username?: string; password?: string; email?: string; code?: string }): RegisterRequest {
			const message = new RegisterRequest({})
			if (data.username != null) {
				message.username = data.username
			}
			if (data.password != null) {
				message.password = data.password
			}
			if (data.email != null) {
				message.email = data.email
			}
			if (data.code != null) {
				message.code = data.code
			}
			return message
		}
		toObject() {
			const data: {
				username?: string
				password?: string
				email?: string
				code?: string
			} = {}
			if (this.username != null) {
				data.username = this.username
			}
			if (this.password != null) {
				data.password = this.password
			}
			if (this.email != null) {
				data.email = this.email
			}
			if (this.code != null) {
				data.code = this.code
			}
			return data
		}
		serialize(): Uint8Array
		serialize(w: pb_1.BinaryWriter): void
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter()
			if (this.username.length) writer.writeString(1, this.username)
			if (this.password.length) writer.writeString(2, this.password)
			if (this.email.length) writer.writeString(3, this.email)
			if (this.code.length) writer.writeString(5, this.code)
			if (!w) return writer.getResultBuffer()
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new RegisterRequest()
			while (reader.nextField()) {
				if (reader.isEndGroup()) break
				switch (reader.getFieldNumber()) {
					case 1:
						message.username = reader.readString()
						break
					case 2:
						message.password = reader.readString()
						break
					case 3:
						message.email = reader.readString()
						break
					case 5:
						message.code = reader.readString()
						break
					default:
						reader.skipField()
				}
			}
			return message
		}
		serializeBinary(): Uint8Array {
			return this.serialize()
		}
		static deserializeBinary(bytes: Uint8Array): RegisterRequest {
			return RegisterRequest.deserialize(bytes)
		}
	}
	export class ResetPassword extends pb_1.Message {
		#one_of_decls: number[][] = []
		constructor(
			data?:
				| any[]
				| {
						code?: string
						email?: string
						password?: string
				  }
		) {
			super()
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('code' in data && data.code != undefined) {
					this.code = data.code
				}
				if ('email' in data && data.email != undefined) {
					this.email = data.email
				}
				if ('password' in data && data.password != undefined) {
					this.password = data.password
				}
			}
		}
		get code() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string
		}
		set code(value: string) {
			pb_1.Message.setField(this, 1, value)
		}
		get email() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string
		}
		set email(value: string) {
			pb_1.Message.setField(this, 2, value)
		}
		get password() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string
		}
		set password(value: string) {
			pb_1.Message.setField(this, 3, value)
		}
		static fromObject(data: { code?: string; email?: string; password?: string }): ResetPassword {
			const message = new ResetPassword({})
			if (data.code != null) {
				message.code = data.code
			}
			if (data.email != null) {
				message.email = data.email
			}
			if (data.password != null) {
				message.password = data.password
			}
			return message
		}
		toObject() {
			const data: {
				code?: string
				email?: string
				password?: string
			} = {}
			if (this.code != null) {
				data.code = this.code
			}
			if (this.email != null) {
				data.email = this.email
			}
			if (this.password != null) {
				data.password = this.password
			}
			return data
		}
		serialize(): Uint8Array
		serialize(w: pb_1.BinaryWriter): void
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter()
			if (this.code.length) writer.writeString(1, this.code)
			if (this.email.length) writer.writeString(2, this.email)
			if (this.password.length) writer.writeString(3, this.password)
			if (!w) return writer.getResultBuffer()
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPassword {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new ResetPassword()
			while (reader.nextField()) {
				if (reader.isEndGroup()) break
				switch (reader.getFieldNumber()) {
					case 1:
						message.code = reader.readString()
						break
					case 2:
						message.email = reader.readString()
						break
					case 3:
						message.password = reader.readString()
						break
					default:
						reader.skipField()
				}
			}
			return message
		}
		serializeBinary(): Uint8Array {
			return this.serialize()
		}
		static deserializeBinary(bytes: Uint8Array): ResetPassword {
			return ResetPassword.deserialize(bytes)
		}
	}
	export class EmailVerifyRequest extends pb_1.Message {
		#one_of_decls: number[][] = []
		constructor(
			data?:
				| any[]
				| {
						email?: string
				  }
		) {
			super()
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('email' in data && data.email != undefined) {
					this.email = data.email
				}
			}
		}
		get email() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string
		}
		set email(value: string) {
			pb_1.Message.setField(this, 1, value)
		}
		static fromObject(data: { email?: string }): EmailVerifyRequest {
			const message = new EmailVerifyRequest({})
			if (data.email != null) {
				message.email = data.email
			}
			return message
		}
		toObject() {
			const data: {
				email?: string
			} = {}
			if (this.email != null) {
				data.email = this.email
			}
			return data
		}
		serialize(): Uint8Array
		serialize(w: pb_1.BinaryWriter): void
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter()
			if (this.email.length) writer.writeString(1, this.email)
			if (!w) return writer.getResultBuffer()
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailVerifyRequest {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new EmailVerifyRequest()
			while (reader.nextField()) {
				if (reader.isEndGroup()) break
				switch (reader.getFieldNumber()) {
					case 1:
						message.email = reader.readString()
						break
					default:
						reader.skipField()
				}
			}
			return message
		}
		serializeBinary(): Uint8Array {
			return this.serialize()
		}
		static deserializeBinary(bytes: Uint8Array): EmailVerifyRequest {
			return EmailVerifyRequest.deserialize(bytes)
		}
	}
	export class EmailVerifyCode extends pb_1.Message {
		#one_of_decls: number[][] = []
		constructor(
			data?:
				| any[]
				| {
						email?: string
						code?: string
				  }
		) {
			super()
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('email' in data && data.email != undefined) {
					this.email = data.email
				}
				if ('code' in data && data.code != undefined) {
					this.code = data.code
				}
			}
		}
		get email() {
			return pb_1.Message.getFieldWithDefault(this, 1, '') as string
		}
		set email(value: string) {
			pb_1.Message.setField(this, 1, value)
		}
		get code() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string
		}
		set code(value: string) {
			pb_1.Message.setField(this, 2, value)
		}
		static fromObject(data: { email?: string; code?: string }): EmailVerifyCode {
			const message = new EmailVerifyCode({})
			if (data.email != null) {
				message.email = data.email
			}
			if (data.code != null) {
				message.code = data.code
			}
			return message
		}
		toObject() {
			const data: {
				email?: string
				code?: string
			} = {}
			if (this.email != null) {
				data.email = this.email
			}
			if (this.code != null) {
				data.code = this.code
			}
			return data
		}
		serialize(): Uint8Array
		serialize(w: pb_1.BinaryWriter): void
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter()
			if (this.email.length) writer.writeString(1, this.email)
			if (this.code.length) writer.writeString(2, this.code)
			if (!w) return writer.getResultBuffer()
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailVerifyCode {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new EmailVerifyCode()
			while (reader.nextField()) {
				if (reader.isEndGroup()) break
				switch (reader.getFieldNumber()) {
					case 1:
						message.email = reader.readString()
						break
					case 2:
						message.code = reader.readString()
						break
					default:
						reader.skipField()
				}
			}
			return message
		}
		serializeBinary(): Uint8Array {
			return this.serialize()
		}
		static deserializeBinary(bytes: Uint8Array): EmailVerifyCode {
			return EmailVerifyCode.deserialize(bytes)
		}
	}
	export class Response extends pb_1.Message {
		#one_of_decls: number[][] = []
		constructor(
			data?:
				| any[]
				| {
						code?: number
						message?: string
				  }
		) {
			super()
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('code' in data && data.code != undefined) {
					this.code = data.code
				}
				if ('message' in data && data.message != undefined) {
					this.message = data.message
				}
			}
		}
		get code() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number
		}
		set code(value: number) {
			pb_1.Message.setField(this, 1, value)
		}
		get message() {
			return pb_1.Message.getFieldWithDefault(this, 2, '') as string
		}
		set message(value: string) {
			pb_1.Message.setField(this, 2, value)
		}
		static fromObject(data: { code?: number; message?: string }): Response {
			const message = new Response({})
			if (data.code != null) {
				message.code = data.code
			}
			if (data.message != null) {
				message.message = data.message
			}
			return message
		}
		toObject() {
			const data: {
				code?: number
				message?: string
			} = {}
			if (this.code != null) {
				data.code = this.code
			}
			if (this.message != null) {
				data.message = this.message
			}
			return data
		}
		serialize(): Uint8Array
		serialize(w: pb_1.BinaryWriter): void
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter()
			if (this.code != 0) writer.writeInt32(1, this.code)
			if (this.message.length) writer.writeString(2, this.message)
			if (!w) return writer.getResultBuffer()
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new Response()
			while (reader.nextField()) {
				if (reader.isEndGroup()) break
				switch (reader.getFieldNumber()) {
					case 1:
						message.code = reader.readInt32()
						break
					case 2:
						message.message = reader.readString()
						break
					default:
						reader.skipField()
				}
			}
			return message
		}
		serializeBinary(): Uint8Array {
			return this.serialize()
		}
		static deserializeBinary(bytes: Uint8Array): Response {
			return Response.deserialize(bytes)
		}
	}
	export class LoginResponse extends pb_1.Message {
		#one_of_decls: number[][] = []
		constructor(
			data?:
				| any[]
				| {
						code?: number
						id?: number
						username?: string
						line?: string
						avatar?: string
						email?: string
						message?: string
						token?: string
						gender?: boolean
						phone?: string
				  }
		) {
			super()
			pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls)
			if (!Array.isArray(data) && typeof data == 'object') {
				if ('code' in data && data.code != undefined) {
					this.code = data.code
				}
				if ('id' in data && data.id != undefined) {
					this.id = data.id
				}
				if ('username' in data && data.username != undefined) {
					this.username = data.username
				}
				if ('line' in data && data.line != undefined) {
					this.line = data.line
				}
				if ('avatar' in data && data.avatar != undefined) {
					this.avatar = data.avatar
				}
				if ('email' in data && data.email != undefined) {
					this.email = data.email
				}
				if ('message' in data && data.message != undefined) {
					this.message = data.message
				}
				if ('token' in data && data.token != undefined) {
					this.token = data.token
				}
				if ('gender' in data && data.gender != undefined) {
					this.gender = data.gender
				}
				if ('phone' in data && data.phone != undefined) {
					this.phone = data.phone
				}
			}
		}
		get code() {
			return pb_1.Message.getFieldWithDefault(this, 1, 0) as number
		}
		set code(value: number) {
			pb_1.Message.setField(this, 1, value)
		}
		get id() {
			return pb_1.Message.getFieldWithDefault(this, 2, 0) as number
		}
		set id(value: number) {
			pb_1.Message.setField(this, 2, value)
		}
		get username() {
			return pb_1.Message.getFieldWithDefault(this, 3, '') as string
		}
		set username(value: string) {
			pb_1.Message.setField(this, 3, value)
		}
		get line() {
			return pb_1.Message.getFieldWithDefault(this, 4, '') as string
		}
		set line(value: string) {
			pb_1.Message.setField(this, 4, value)
		}
		get avatar() {
			return pb_1.Message.getFieldWithDefault(this, 5, '') as string
		}
		set avatar(value: string) {
			pb_1.Message.setField(this, 5, value)
		}
		get email() {
			return pb_1.Message.getFieldWithDefault(this, 6, '') as string
		}
		set email(value: string) {
			pb_1.Message.setField(this, 6, value)
		}
		get message() {
			return pb_1.Message.getFieldWithDefault(this, 7, '') as string
		}
		set message(value: string) {
			pb_1.Message.setField(this, 7, value)
		}
		get token() {
			return pb_1.Message.getFieldWithDefault(this, 8, '') as string
		}
		set token(value: string) {
			pb_1.Message.setField(this, 8, value)
		}
		get gender() {
			return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean
		}
		set gender(value: boolean) {
			pb_1.Message.setField(this, 9, value)
		}
		get phone() {
			return pb_1.Message.getFieldWithDefault(this, 10, '') as string
		}
		set phone(value: string) {
			pb_1.Message.setField(this, 10, value)
		}
		static fromObject(data: {
			code?: number
			id?: number
			username?: string
			line?: string
			avatar?: string
			email?: string
			message?: string
			token?: string
			gender?: boolean
			phone?: string
		}): LoginResponse {
			const message = new LoginResponse({})
			if (data.code != null) {
				message.code = data.code
			}
			if (data.id != null) {
				message.id = data.id
			}
			if (data.username != null) {
				message.username = data.username
			}
			if (data.line != null) {
				message.line = data.line
			}
			if (data.avatar != null) {
				message.avatar = data.avatar
			}
			if (data.email != null) {
				message.email = data.email
			}
			if (data.message != null) {
				message.message = data.message
			}
			if (data.token != null) {
				message.token = data.token
			}
			if (data.gender != null) {
				message.gender = data.gender
			}
			if (data.phone != null) {
				message.phone = data.phone
			}
			return message
		}
		toObject() {
			const data: {
				code?: number
				id?: number
				username?: string
				line?: string
				avatar?: string
				email?: string
				message?: string
				token?: string
				gender?: boolean
				phone?: string
			} = {}
			if (this.code != null) {
				data.code = this.code
			}
			if (this.id != null) {
				data.id = this.id
			}
			if (this.username != null) {
				data.username = this.username
			}
			if (this.line != null) {
				data.line = this.line
			}
			if (this.avatar != null) {
				data.avatar = this.avatar
			}
			if (this.email != null) {
				data.email = this.email
			}
			if (this.message != null) {
				data.message = this.message
			}
			if (this.token != null) {
				data.token = this.token
			}
			if (this.gender != null) {
				data.gender = this.gender
			}
			if (this.phone != null) {
				data.phone = this.phone
			}
			return data
		}
		serialize(): Uint8Array
		serialize(w: pb_1.BinaryWriter): void
		serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
			const writer = w || new pb_1.BinaryWriter()
			if (this.code != 0) writer.writeInt32(1, this.code)
			if (this.id != 0) writer.writeUint32(2, this.id)
			if (this.username.length) writer.writeString(3, this.username)
			if (this.line.length) writer.writeString(4, this.line)
			if (this.avatar.length) writer.writeString(5, this.avatar)
			if (this.email.length) writer.writeString(6, this.email)
			if (this.message.length) writer.writeString(7, this.message)
			if (this.token.length) writer.writeString(8, this.token)
			if (this.gender != false) writer.writeBool(9, this.gender)
			if (this.phone.length) writer.writeString(10, this.phone)
			if (!w) return writer.getResultBuffer()
		}
		static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
			const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
				message = new LoginResponse()
			while (reader.nextField()) {
				if (reader.isEndGroup()) break
				switch (reader.getFieldNumber()) {
					case 1:
						message.code = reader.readInt32()
						break
					case 2:
						message.id = reader.readUint32()
						break
					case 3:
						message.username = reader.readString()
						break
					case 4:
						message.line = reader.readString()
						break
					case 5:
						message.avatar = reader.readString()
						break
					case 6:
						message.email = reader.readString()
						break
					case 7:
						message.message = reader.readString()
						break
					case 8:
						message.token = reader.readString()
						break
					case 9:
						message.gender = reader.readBool()
						break
					case 10:
						message.phone = reader.readString()
						break
					default:
						reader.skipField()
				}
			}
			return message
		}
		serializeBinary(): Uint8Array {
			return this.serialize()
		}
		static deserializeBinary(bytes: Uint8Array): LoginResponse {
			return LoginResponse.deserialize(bytes)
		}
	}
}
